[{"path":"https://gitboosting.github.io/imuf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 imuf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gitboosting.github.io/imuf/articles/animate_imu.html","id":"section-introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"animate_imu","text":"vignette describes one may generate 3-D animation time series orientations inertial measurement unit (IMU). first follow steps described vignette(\"imuf\") generate time series orientations using walking_shin_1 dataset:","code":"library(imuf) library(purrr) # lst_ned_in <- as.list(as.data.frame(t(walking_shin_1))) %>% unname dt <- 1/50 # myCompUpdate <- function(initQ, accgyr) {   acc <- accgyr[1:3]   gyr <- accgyr[4:6]   gain <- 0.1   orientation <- compUpdate(acc, gyr, dt, initQ, gain)   orientation } # orientations <- purrr::accumulate(lst_ned_in, myCompUpdate, .init = c(1, 0, 0, 0)) # head(orientations) #> [[1]] #> [1] 1 0 0 0 #>  #> [[2]] #> [1]  0.9999657701 -0.0041990423 -0.0071175965 -0.0004080098 #>  #> [[3]] #> [1]  0.9998798598 -0.0078567189 -0.0133472834 -0.0006228269 #>  #> [[4]] #> [1]  0.9997609096 -0.0111531161 -0.0187912870 -0.0007868925 #>  #> [[5]] #> [1]  0.9996243467 -0.0139555857 -0.0235688255 -0.0009578893 #>  #> [[6]] #> [1]  0.999478521 -0.016386379 -0.027797655 -0.001209502"},{"path":"https://gitboosting.github.io/imuf/articles/animate_imu.html","id":"section-d-animation-of-imu-orientations","dir":"Articles","previous_headings":"","what":"3-D animation of IMU orientations","title":"animate_imu","text":"Next use animate_imu() function visualize 3-D animation orienations.","code":"# # time increment for animation needs to be in milli-seconds animate_imu(orientations, dt*1000)"},{"path":"https://gitboosting.github.io/imuf/articles/animate_imu.html","id":"section-d-animation-of-imu-orientations-within-shiny","dir":"Articles","previous_headings":"","what":"3-D animation of IMU orientations within Shiny","title":"animate_imu","text":"now illustrate one may display 3-D animation Shiny.","code":"library(shiny)  ui = pageWithSidebar(   headerPanel(\"render an IMU animation example\"),   sidebarPanel(actionButton(\"do\", \"See animation\")),   mainPanel(animate_imuOutput('orientations')) )  server = function(input, output, session) {   observeEvent(input$do, {     output$orientations <- renderAnimate_imu(       animate_imu(orientations, dt*1000)     )   }) }  shinyApp(ui = ui, server = server)"},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"imuf","text":"imuf package performs sensor fusion inertial measurement unit (IMU) 3-axis accelerometer 3-axis gyroscope. Specifically, compUpdate() uses complementary filtering estimate sensor’s final orientation, given initial orientation, sensor readings accelerations angular velocities time point, time duration data samples, gain factor (0 1) specifying weighting accelerometer measurements. vignette describes one may use imuf package analyze real world dataset IMU measurements.","code":"library(imuf) library(purrr) library(ggplot2)"},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"imuf","text":"walking_shin_1 dataset contains 31,946 rows sensor readings. reading consists 3 accelerations (m/s^2) 3 angular velocities (rad/sec) measurements north (x), east (y), (z) directions. data sampling rate 50 Hz, translates time duration 0.02 second readings. prepare subsequent analyses, first convert dataframe list:","code":"head(walking_shin_1) #> # A tibble: 6 × 6 #>   acc_x acc_y  acc_z   gyr_x     gyr_y   gyr_z #>   <dbl> <dbl>  <dbl>   <dbl>     <dbl>   <dbl> #> 1 -1.44 0.803 -10.0  -0.0238  0.00244  -0.0406 #> 2 -1.40 0.785  -9.94 -0.0177  0.00336  -0.0211 #> 3 -1.36 0.784  -9.95 -0.0195  0.00183  -0.0159 #> 4 -1.33 0.746  -9.97 -0.0223 -0.00275  -0.0162 #> 5 -1.32 0.724  -9.96 -0.0241 -0.000916 -0.0238 #> 6 -1.39 0.785  -9.97 -0.0186 -0.00367  -0.0312 lst_ned_in <- as.list(as.data.frame(t(walking_shin_1))) %>% unname head(lst_ned_in, 2) #> [[1]] #> [1] -1.440710900  0.803254660 -9.996989000 -0.023823744  0.002443461 #> [6] -0.040622540 #>  #> [[2]] #> [1] -1.398812300  0.785298170 -9.943120000 -0.017715093  0.003359759 #> [6] -0.021074850"},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"orientation-update","dir":"Articles","previous_headings":"","what":"Orientation update","title":"imuf","text":"now look update sensor orientation given IMU measurements. 3 steps: Create helper function Update sensor orientation one IMU reading Update sensor orientation list IMU readings","code":""},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"helper-function","dir":"Articles","previous_headings":"Orientation update","what":"Helper function","title":"imuf","text":"first wrap compUpdate() helper function:","code":"myCompUpdate <- function(initQ, accgyr) {   acc <- accgyr[1:3]   gyr <- accgyr[4:6]   dt <- 1/50   gain <- 0.1   orientation <- compUpdate(acc, gyr, dt, initQ, gain)   orientation }"},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"orientation-update-for-one-imu-reading","dir":"Articles","previous_headings":"Orientation update","what":"Orientation update for one IMU reading","title":"imuf","text":"Next, use helper function process first two sensor readings dataset. processing first reading, simply assume sensor’s initial orientation aligned world frame. However, procesing second reading, take output processing first reading inital orientation.","code":"(q1 <- myCompUpdate(c(1, 0, 0, 0), lst_ned_in[[1]])) #> [1]  0.9999657701 -0.0041990423 -0.0071175965 -0.0004080098 (q2 <- myCompUpdate(q1, lst_ned_in[[2]])) #> [1]  0.9998798598 -0.0078567189 -0.0133472834 -0.0006228269"},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"orientation-update-for-multiple-imu-readings","dir":"Articles","previous_headings":"Orientation update","what":"Orientation update for multiple IMU readings","title":"imuf","text":"Now process entire list IMU readings. take advantage purrr::accumulate() automatically takes output current iteration input next iteration: Note length output list one input list, extra element initial quaternion c(1, 0, 0, 0).","code":"orientations <- purrr::accumulate(lst_ned_in, myCompUpdate, .init = c(1, 0, 0, 0)) head(orientations, 5) #> [[1]] #> [1] 1 0 0 0 #>  #> [[2]] #> [1]  0.9999657701 -0.0041990423 -0.0071175965 -0.0004080098 #>  #> [[3]] #> [1]  0.9998798598 -0.0078567189 -0.0133472834 -0.0006228269 #>  #> [[4]] #> [1]  0.9997609096 -0.0111531161 -0.0187912870 -0.0007868925 #>  #> [[5]] #> [1]  0.9996243467 -0.0139555857 -0.0235688255 -0.0009578893"},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"application-of-orientations","dir":"Articles","previous_headings":"","what":"Application of orientations","title":"imuf","text":"result previous step list sensor orientations expressed unit 4-vector rotation quaternions. can use rotation quaternions transform vector sensor’s body frame world frame. Since walking_shin_1 dataset comes sensor strapped onto shin subject walked 10 minutes, illustration use sensor orientations study turns taken subject journey. 3 steps: Use rotV() transform vector body frame world frame Create function calculate turn angle Compute turn angles every time point","code":""},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"vector-transformation","dir":"Articles","previous_headings":"Application of orientations","what":"Vector transformation","title":"imuf","text":"can transform vector body frame world frame rotating vector orientation sensor. rotV() performs rotation. example, rotating vector pointing east-direction (c(0, 1, 0)) north-direction 90 degrees results vector pointing -direction (c(0, 0, 1)):","code":"q <- c(cos(pi/4), sin(pi/4), 0, 0) vin <- c(0, 1, 0) rotV(q, vin) #> [1] 0.000000e+00 2.220446e-16 1.000000e+00"},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"turn-angle-function","dir":"Articles","previous_headings":"Application of orientations","what":"Turn angle function","title":"imuf","text":"Next, write function compute turn angle rotated vector:","code":"getTurnAngle <- function(quat) {   # a function to rotate c(1, 0, 0) by quat   # and then compute the angle between (1, 0, 0) and the rotated vector   # projected onto the n-e plane and    # this construct is to detect turns   rotVec <- rotV(quat, c(1, 0, 0))   theta <- atan2(rotVec[2], rotVec[1]) * 180 / pi   theta }"},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"turn-angles-for-all-time-points","dir":"Articles","previous_headings":"Application of orientations","what":"Turn angles for all time points","title":"imuf","text":"Lastly, compute turn angles using purrr::map():","code":"turnAngles <- orientations %>% purrr::map(getTurnAngle) %>% unlist() head(turnAngles) #> [1]  0.00000000 -0.04333247 -0.05936656 -0.06618022 -0.07211392 -0.08646343"},{"path":"https://gitboosting.github.io/imuf/articles/imuf.html","id":"analyses-of-turn-angles","dir":"Articles","previous_headings":"Application of orientations","what":"Analyses of turn angles","title":"imuf","text":"Let’s take look results:  sharp jumps turn angles. reason atan2() restricts angles -180 +180. angle 181 becomes -179 breaking continuity. can use function remove artificial jumps maintain continuity:  remains jumps turn angles. jumps artificial. reflect actual behaviors subject journey. example, 5 minute mark, data suggests made 180 degree turn. can indeed confirmed video.","code":"# # create a vector of time stamps in minutes # note that sampling frequency is 50 Hz x <- 1:length(turnAngles) / 50 / 60 # ggplot2::ggplot(mapping = aes(x = x, y = turnAngles)) + ggplot2::geom_line() # # a function to remove artificial jumps in turn angles rmJumps <- function(theta) {   firstDiffs <- diff(theta)   bigDiffIdx <- which(abs(firstDiffs) > 100)   #   # fix #1   theta[(bigDiffIdx[1]+1):bigDiffIdx[2]] <- theta[(bigDiffIdx[1]+1):bigDiffIdx[2]] + 360   #   # fix #2   theta[(bigDiffIdx[3]+1):bigDiffIdx[4]] <- theta[(bigDiffIdx[3]+1):bigDiffIdx[4]] + 360   #   # fix #3   theta[(bigDiffIdx[4]+1):length(theta)] <- theta[(bigDiffIdx[4]+1):length(theta)] + 2*360   theta } # # remove artificial jumps turnAnglesNoJumps <- rmJumps(turnAngles) # # plot it ggplot2::ggplot(mapping = aes(x = x, y = turnAnglesNoJumps)) + ggplot2::geom_line() # # zero in on +/- 10 sec around 5 minute mark idx_5min <- c(14800:15750) x_5min <- x[idx_5min] turn_5min <- turnAnglesNoJumps[idx_5min] # # plot it ggplot2::ggplot(mapping = aes(x = x_5min, y = turn_5min)) + ggplot2::geom_line()"},{"path":"https://gitboosting.github.io/imuf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Felix Chan. Author, maintainer, copyright holder. Ricardo Cabello. Copyright holder.           'three.js' JavaScript library","code":""},{"path":"https://gitboosting.github.io/imuf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chan F (2025). imuf: Estimate Orientation Inertial Measurement Unit. R package version 0.5.0.9000, https://gitboosting.github.io/imuf/, https://github.com/gitboosting/imuf.","code":"@Manual{,   title = {imuf: Estimate Orientation of an Inertial Measurement Unit},   author = {Felix Chan},   year = {2025},   note = {R package version 0.5.0.9000, https://gitboosting.github.io/imuf/},   url = {https://github.com/gitboosting/imuf}, }"},{"path":"https://gitboosting.github.io/imuf/index.html","id":"imuf-","dir":"","previous_headings":"","what":"Estimate Orientation of an Inertial Measurement Unit","title":"Estimate Orientation of an Inertial Measurement Unit","text":"‘imuf’ uses complementary filtering estimate orientation inertial measurement unit (IMU) 3-axis accelerometer 3-axis gyroscope. takes IMU’s accelerometer gyroscope readings, time duration, initial orientation, ‘gain’ factor inputs, provides estimate final orientation outputs. ‘imuf’ adopts north-east-(NED) coordinate system. initial final orientations expressed quaternions (w, x, y, z) convention.","code":""},{"path":"https://gitboosting.github.io/imuf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimate Orientation of an Inertial Measurement Unit","text":"can install development version imuf GitHub :","code":"install.packages(\"imuf\") # install.packages(\"pak\") pak::pak(\"gitboosting/imuf\")"},{"path":"https://gitboosting.github.io/imuf/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Estimate Orientation of an Inertial Measurement Unit","text":"basic example shows solve common problem:","code":"library(imuf) # acc <- c(0, 0, -1)         # accelerometer NED readings in g (~ 9.81 m/s^2)  gyr <- c(1, 0, 0)          # gyroscope NED readings in radians per second deltat <- 0.1              # time duration in seconds initq <- c(1, 0, 0, 0)     # initial orientation expressed as a quaternion gain <- 0.1                # a weight (0-1) given to the accelerometer readings # # final orientation expressed as a quaternion (final <- compUpdate(acc, gyr, deltat, initq, gain)) #> [1] 0.99898767 0.04498481 0.00000000 0.00000000 # # # rotate a vector pointing east by 90 deg about north q <- c(cos(pi/4), sin(pi/4), 0, 0)   # quaternion to rotate 90 deg about north vin <- c(0, 1, 0)                    # vector in east direction (vout <- rotV(q, vin))               # after rotation, vector is in down direction #> [1] 0.000000e+00 2.220446e-16 1.000000e+00"},{"path":"https://gitboosting.github.io/imuf/reference/animate_imu-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for animate_imu — animate_imu-shiny","title":"Shiny bindings for animate_imu — animate_imu-shiny","text":"Output render functions using animate_imu within Shiny applications interactive Rmd documents.","code":""},{"path":"https://gitboosting.github.io/imuf/reference/animate_imu-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for animate_imu — animate_imu-shiny","text":"","code":"animate_imuOutput(outputId, width = \"100%\", height = \"400px\")  renderAnimate_imu(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://gitboosting.github.io/imuf/reference/animate_imu-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for animate_imu — animate_imu-shiny","text":"outputId output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates animate_imu env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"https://gitboosting.github.io/imuf/reference/animate_imu.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate movement of an inertial measurement unit — animate_imu","title":"Animate movement of an inertial measurement unit — animate_imu","text":"Create interactive animated movements inertial measurement unit","code":""},{"path":"https://gitboosting.github.io/imuf/reference/animate_imu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate movement of an inertial measurement unit — animate_imu","text":"","code":"animate_imu(data, dt, width = NULL, height = NULL, elementId = NULL)"},{"path":"https://gitboosting.github.io/imuf/reference/animate_imu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate movement of an inertial measurement unit — animate_imu","text":"data list numeric 4-vectors unit quaternion (w,x,y,z) dt numeric time duration milli-seconds width, height width height animate_imu htmlwidget specified valid CSS size unit elementId string id valid CSS element id.","code":""},{"path":"https://gitboosting.github.io/imuf/reference/compUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Update orientation with 3-axis acc and gyr data — compUpdate","title":"Update orientation with 3-axis acc and gyr data — compUpdate","text":"compUpdate() uses complementary filtering update orientation, given initial orientation, readings 3-axis accelerometer 3-axis gyroscope. time duration, gain factor","code":""},{"path":"https://gitboosting.github.io/imuf/reference/compUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update orientation with 3-axis acc and gyr data — compUpdate","text":"","code":"compUpdate(acc, gyr, dt, initQuat, gain)"},{"path":"https://gitboosting.github.io/imuf/reference/compUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update orientation with 3-axis acc and gyr data — compUpdate","text":"acc numeric 3-vector 3-axis accelerometer readings g gyr numeric 3-vector 3-axis gyroscope readings rad/sec dt numeric time duration sec initQuat numeric 4-vector starting orientation quaternion gain numeric gain factor 0 1","code":""},{"path":"https://gitboosting.github.io/imuf/reference/compUpdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update orientation with 3-axis acc and gyr data — compUpdate","text":"numeric 4-vector ending orientation quaternion","code":""},{"path":"https://gitboosting.github.io/imuf/reference/compUpdate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update orientation with 3-axis acc and gyr data — compUpdate","text":"","code":"compUpdate(c(0, 0, -1), c(1, 0, 0), 0.1, c(1, 0, 0, 0), 0.1) #> [1] 0.99898767 0.04498481 0.00000000 0.00000000"},{"path":"https://gitboosting.github.io/imuf/reference/imuf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"imuf: Estimate Orientation of an Inertial Measurement Unit — imuf-package","title":"imuf: Estimate Orientation of an Inertial Measurement Unit — imuf-package","text":"Estimate orientation inertial measurement unit (IMU) 3-axis accelerometer 3-axis gyroscope using complementary filter. 'imuf' takes IMU's accelerometer gyroscope readings, time duration, initial orientation, gain factor inputs, returns estimate IMU's final orientation.","code":""},{"path":[]},{"path":"https://gitboosting.github.io/imuf/reference/imuf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"imuf: Estimate Orientation of an Inertial Measurement Unit — imuf-package","text":"Maintainer: Felix Chan chanfelix@gmail.com [copyright holder] contributors: Ricardo Cabello ('three.js' JavaScript library) [copyright holder]","code":""},{"path":"https://gitboosting.github.io/imuf/reference/rotV.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate a 3-vector by a quaternion — rotV","title":"Rotate a 3-vector by a quaternion — rotV","text":"rotV() rotates 3-vector quaternion expressed unit 4-vector (w,x,y,z) convention","code":""},{"path":"https://gitboosting.github.io/imuf/reference/rotV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate a 3-vector by a quaternion — rotV","text":"","code":"rotV(quat, vin)"},{"path":"https://gitboosting.github.io/imuf/reference/rotV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate a 3-vector by a quaternion — rotV","text":"quat numeric unit 4-vector (w,x,y,z) rotation quaternion vin numeric 3-vector rotated quat","code":""},{"path":"https://gitboosting.github.io/imuf/reference/rotV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate a 3-vector by a quaternion — rotV","text":"numeric 3-vector rotation","code":""},{"path":"https://gitboosting.github.io/imuf/reference/rotV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate a 3-vector by a quaternion — rotV","text":"","code":"q <- c(cos(pi/4), sin(pi/4), 0, 0) vin <- c(0, 1, 0) rotV(q, vin) #> [1] 0.000000e+00 2.220446e-16 1.000000e+00"},{"path":"https://gitboosting.github.io/imuf/reference/walking_shin_1.html","id":null,"dir":"Reference","previous_headings":"","what":"University of Mannheim Real World Activities — walking_shin_1","title":"University of Mannheim Real World Activities — walking_shin_1","text":"Accelerations angular velocities captured sensors mobile device situated shin subject 1 subject walking 10 minutes","code":""},{"path":"https://gitboosting.github.io/imuf/reference/walking_shin_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"University of Mannheim Real World Activities — walking_shin_1","text":"","code":"walking_shin_1"},{"path":[]},{"path":"https://gitboosting.github.io/imuf/reference/walking_shin_1.html","id":"walking-shin-","dir":"Reference","previous_headings":"","what":"walking_shin_1","title":"University of Mannheim Real World Activities — walking_shin_1","text":"data frame 31,946 rows 6 columns accelerometer gyroscope measurements 50 Hz acc_x, acc_y, acc_z north, east acceleration m/s^2 gyr_x, gyr_y, gyr_z angular velocity north, east rad/sec","code":""},{"path":"https://gitboosting.github.io/imuf/reference/walking_shin_1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"University of Mannheim Real World Activities — walking_shin_1","text":"https://www.uni-mannheim.de/dws/research/projects/activity-recognition/dataset/dataset-realworld/s1/","code":""},{"path":[]},{"path":"https://gitboosting.github.io/imuf/news/index.html","id":"imuf-050","dir":"Changelog","previous_headings":"","what":"imuf 0.5.0","title":"imuf 0.5.0","text":"CRAN release: 2025-01-11 Added animation IMU orientations","code":""},{"path":"https://gitboosting.github.io/imuf/news/index.html","id":"imuf-040","dir":"Changelog","previous_headings":"","what":"imuf 0.4.0","title":"imuf 0.4.0","text":"CRAN release: 2024-12-08 Added rotV()rotate 3-vector quaternion Added walking_shin_1 dataset Better function documentation Added vignette","code":""},{"path":"https://gitboosting.github.io/imuf/news/index.html","id":"imuf-030","dir":"Changelog","previous_headings":"","what":"imuf 0.3.0","title":"imuf 0.3.0","text":"CRAN release: 2024-11-06","code":""},{"path":"https://gitboosting.github.io/imuf/news/index.html","id":"imuf-021","dir":"Changelog","previous_headings":"","what":"imuf 0.2.1","title":"imuf 0.2.1","text":"CRAN release: 2024-10-17","code":""},{"path":[]},{"path":"https://gitboosting.github.io/imuf/news/index.html","id":"imuf-010","dir":"Changelog","previous_headings":"","what":"imuf 0.1.0","title":"imuf 0.1.0","text":"Initial CRAN submission.","code":""}]
